//Imports
import java.util.*;
import javax.swing.ImageIcon;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
Programmer: Mithusan Arulampalam
Date: October 18th, 2019
Program Name: Matching Game
* Program Description: This program uses arrays to simulate a matching game.
* looking for matching cards, The goal of this game is to see how quickly
* the user can find all the matches.
*/

public class MatchingGame extends javax.swing.JFrame {
//Creates Arraylists
//The arrayLists are set up to hold cards in original list 
//and cards set at random.
ArrayList <String> cards = new ArrayList();
ArrayList <String> set = new ArrayList();
        
//Attaches Certain Images to each Variable
//set up to hold and change the pictures for matching
ImageIcon a = new ImageIcon("Corsair.jpg");
ImageIcon b = new ImageIcon("Intel.jpg");
ImageIcon c = new ImageIcon("LianLi.jpg");
ImageIcon d = new ImageIcon("msi.jpg");
ImageIcon e = new ImageIcon("Noctua.jpg");
ImageIcon f = new ImageIcon("Nvidia.jpg");
ImageIcon g = new ImageIcon("Radeon.jpg");
ImageIcon h = new ImageIcon("Rog.jpg");
ImageIcon i = new ImageIcon("Ryzen.jpg");
ImageIcon j = new ImageIcon("Aorus.jpg");
ImageIcon back = new ImageIcon("cardback.jpg");
ImageIcon done = new ImageIcon("done.jpg");

//Variables
int count, c1, c2, card1, card2;
int cardsLeft = 20;
int[] change = new int [20];
int win = 20;

    /**
     * Creates new form MatchingGame
     */
    public MatchingGame() {
        initComponents();
        //DISABLES BUTTONS
        //Disables all Buttons
        Card1.setEnabled(false);
        Card2.setEnabled(false);
        Card3.setEnabled(false);
        Card4.setEnabled(false);
        Card5.setEnabled(false);
        Card6.setEnabled(false);
        Card7.setEnabled(false);
        Card8.setEnabled(false);
        Card9.setEnabled(false);
        Card10.setEnabled(false);
        Card11.setEnabled(false);
        Card12.setEnabled(false);
        Card13.setEnabled(false);
        Card14.setEnabled(false);
        Card15.setEnabled(false);
        Card16.setEnabled(false);
        Card17.setEnabled(false);
        Card18.setEnabled(false);
        Card19.setEnabled(false);
        Card20.setEnabled(false);
        
        //Disables Guess Again Button
        guessAgain.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTitle = new javax.swing.JLabel();
        play = new javax.swing.JButton();
        guessAgain = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        Card1 = new javax.swing.JButton();
        Card2 = new javax.swing.JButton();
        Card3 = new javax.swing.JButton();
        Card4 = new javax.swing.JButton();
        Card5 = new javax.swing.JButton();
        Card6 = new javax.swing.JButton();
        Card7 = new javax.swing.JButton();
        Card8 = new javax.swing.JButton();
        Card9 = new javax.swing.JButton();
        Card10 = new javax.swing.JButton();
        Card11 = new javax.swing.JButton();
        Card12 = new javax.swing.JButton();
        Card13 = new javax.swing.JButton();
        Card14 = new javax.swing.JButton();
        Card15 = new javax.swing.JButton();
        Card16 = new javax.swing.JButton();
        Message = new javax.swing.JTextField();
        Card17 = new javax.swing.JButton();
        Card18 = new javax.swing.JButton();
        Card19 = new javax.swing.JButton();
        Card20 = new javax.swing.JButton();
        WinLabel = new javax.swing.JLabel();
        Reset = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTitle.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        mainTitle.setForeground(new java.awt.Color(255, 0, 51));
        mainTitle.setText("Matching Game");

        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        guessAgain.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        guessAgain.setText("Guess Again");
        guessAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessAgainActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        Card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card1MouseClicked(evt);
            }
        });

        Card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card2MouseClicked(evt);
            }
        });

        Card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card3MouseClicked(evt);
            }
        });

        Card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card4MouseClicked(evt);
            }
        });

        Card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card5MouseClicked(evt);
            }
        });

        Card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card6MouseClicked(evt);
            }
        });

        Card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card7MouseClicked(evt);
            }
        });

        Card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card8MouseClicked(evt);
            }
        });

        Card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card9MouseClicked(evt);
            }
        });

        Card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card10MouseClicked(evt);
            }
        });

        Card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card11MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Card11MouseEntered(evt);
            }
        });

        Card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card12MouseClicked(evt);
            }
        });
        Card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card12ActionPerformed(evt);
            }
        });

        Card13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card13MouseClicked(evt);
            }
        });

        Card14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card14MouseClicked(evt);
            }
        });

        Card15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card15MouseClicked(evt);
            }
        });

        Card16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card16MouseClicked(evt);
            }
        });

        Message.setText("        Click the Play button to start. Make sure to click Guess Again after each guess");
        Message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MessageActionPerformed(evt);
            }
        });

        Card17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card17MouseClicked(evt);
            }
        });

        Card18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card18MouseClicked(evt);
            }
        });

        Card19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card19MouseClicked(evt);
            }
        });

        Card20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        Card20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card20MouseClicked(evt);
            }
        });

        WinLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        WinLabel.setForeground(new java.awt.Color(255, 51, 51));

        Reset.setText("jButton1");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(play, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card16, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Card5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Card18, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(Card19, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(Card20, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Card13, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(Card14, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(Card15, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(WinLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(guessAgain, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(mainTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(Reset)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(mainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card13, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card14, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card15, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Card16, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card18, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Card19, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(guessAgain, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(play)
                                    .addComponent(exit)
                                    .addComponent(WinLabel)))
                            .addComponent(Card20, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Reset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Card12ActionPerformed

    private void guessAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessAgainActionPerformed
        count = 0;
        
        //checks to see if the same card has been chosen, 
        //then changes the buttons to the done icon
        if (c1 == c2) {
            for (int y=1; y<=2; y++) {
                if (change[0] == 0) {
                    Card1.setIcon (done);
                    change[0] = 2;
                    win -= 1;//Variable used towards Winning Msg
                } 
                else if (change[1] == 0) {
                    Card2.setIcon(done);
                    change[1] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[2] == 0) {
                    Card3.setIcon(done);
                    change[2] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[3] == 0) {
                    Card4.setIcon(done);
                    change[3] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[4] == 0) {
                    Card5.setIcon(done);
                    change[4] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[5] == 0) {
                    Card6.setIcon(done);
                    change[5] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[6] == 0) {
                    Card7.setIcon(done);
                    change[6] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[7] == 0) {
                    Card8.setIcon(done);
                    change[7] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[8] == 0) {
                    Card9.setIcon(done);
                    change[8] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[9] == 0) {
                    Card10.setIcon(done);
                    change[9] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[10] == 0) {
                    Card11.setIcon(done);
                    change[10] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[11] == 0) {
                    Card12.setIcon(done);
                    change[11] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[12] == 0) {
                    Card13.setIcon(done);
                    change[12] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[13] == 0) {
                    Card14.setIcon(done);
                    change[13] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[14] == 0) {
                    Card15.setIcon(done);
                    change[14] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[15] == 0) {
                    Card16.setIcon(done);
                    change[15] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[16] == 0) {
                    Card17.setIcon(done);
                    change[16] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[17] == 0) {
                    Card18.setIcon(done);
                    change[17] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[18] == 0) {
                    Card19.setIcon(done);
                    change[18] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                else if (change[19] == 0) {
                    Card20.setIcon(done);
                    change[19] = 2;
                    win -= 1;//Variable used towards Winning Msg
                }
                
                //Congratulates User for Winning
                if (win == 0){
                    WinLabel.setText("Congratulations");
                }
            } 
        }
        
        //If buttons are not equal, the buttons change back to the card icon.    
        else {
            for (int y = 1; y <= 2; y++) {
                if (change[0] == 0) {
                    Card1.setIcon (back);
                    change[0] = 1;
                } 
                else if (change[1] == 0) {
                    Card2.setIcon(back);
                    change[1] = 1;
                }
                else if (change[2] == 0) {
                    Card3.setIcon(back);
                    change[2] = 1;
                }
                else if (change[3] == 0) {
                    Card4.setIcon(back);
                    change[3] = 1;
                }
                else if (change[4] == 0) {
                    Card5.setIcon(back);
                    change[4] = 1;
                }
                else if (change[5] == 0) {
                    Card6.setIcon(back);
                    change[5] = 1;
                }
                else if (change[6] == 0) {
                    Card7.setIcon(back);
                    change[6] = 1;
                }
                else if (change[7] == 0) {
                    Card8.setIcon(back);
                    change[7] = 1;
                }
                else if (change[8] == 0) {
                    Card9.setIcon(back);
                    change[8] = 1;
                }
                else if (change[9] == 0) {
                    Card10.setIcon(back);
                    change[9] = 1;
                }
                else if (change[10] == 0) {
                    Card11.setIcon(back);
                    change[10] = 1;
                }
                else if (change[11] == 0) {
                    Card12.setIcon(back);
                    change[11] = 1;
                }
                else if (change[12] == 0) {
                    Card13.setIcon(back);
                    change[12] = 1;
                }
                else if (change[13] == 0) {
                    Card14.setIcon(back);
                    change[13] = 1;
                }
                else if (change[14] == 0) {
                    Card15.setIcon(back);
                    change[14] = 1;
                }
                else if (change[15] == 0) {
                    Card16.setIcon(back);
                    change[15] = 1;
                }
                else if (change[16] == 0) {
                    Card17.setIcon(back);
                    change[16] = 1;
                }
                else if (change[17] == 0) {
                    Card18.setIcon(back);
                    change[17] = 1;
                }
                else if (change[18] == 0) {
                    Card19.setIcon(back);
                    change[18] = 1;
                }
                else if (change[19] == 0) {
                    Card20.setIcon(back);
                    change[19] = 1;
                }
                
            }
        }
    }//GEN-LAST:event_guessAgainActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        //ENABLES BUTTONS
        //Enables all Cards
        Card1.setEnabled(true);
        Card2.setEnabled(true);
        Card3.setEnabled(true);
        Card4.setEnabled(true);
        Card5.setEnabled(true);
        Card6.setEnabled(true);
        Card7.setEnabled(true);
        Card8.setEnabled(true);
        Card9.setEnabled(true);
        Card10.setEnabled(true);
        Card11.setEnabled(true);
        Card12.setEnabled(true);
        Card13.setEnabled(true);
        Card14.setEnabled(true);
        Card15.setEnabled(true);
        Card16.setEnabled(true);
        Card17.setEnabled(true);
        Card18.setEnabled(true);
        Card19.setEnabled(true);
        Card20.setEnabled(true);
        
        //Enables Guess Again Button
        guessAgain.setEnabled(true);
        
        //Disables play Button
        play.setEnabled(false);

        //Set Change array
        //Sets up the array to check if a match has been made
        for(int z = 0; z <= 19; z++){
            change[z] = 1;
        }//for(int z = 0; z <= 15; z++)
        
        //Assign cards at random
        String temp;
        //puts the numbers zero to seven in the set arrayList
        for(int x =0; x <= 9; x++){
            //puts the numbers in two consecutive array entries
            for(int y = 1; y <= 2; y++){
                temp = Integer.toString(x);
                set.add(temp);//puts the entry in the next available position
            }//for(int y = 1; y <= 2; y++)
        }//for(int x =0; x <= 7; x++)
        
        for (int x = 0; x <= 19; x++){
            //creates a random number and converts it to integer status
            double index = Math.floor(Math.random() * (19 - x));
            int index1 = (int) index;//Converts to int
            //add the card to the random arrayList cards, remove them from the 
            //original array, then renumber the remaining cards. The random 
            //number is then generated again, but for one less element.
            cards.add(set.get(index1));
            set.remove(set.get(index1));
        }//for (int x = 0; x <= 19; x++)
    }//GEN-LAST:event_playActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        //Closes Program
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void Card1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card1MouseClicked
        String temp = cards.get(0);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card1.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card1.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card1.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card1.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card1.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card1.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card1.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card1.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card1.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card1.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[0] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[0] = 0;
        }
    }//GEN-LAST:event_Card1MouseClicked

    private void Card2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card2MouseClicked
        String temp = cards.get(1);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card2.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card2.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card2.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card2.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card2.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card2.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card2.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card2.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card2.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card2.setIcon(j);
        }
            
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[1] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[1] = 0;
        }
    }//GEN-LAST:event_Card2MouseClicked

    private void Card3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card3MouseClicked
        String temp = cards.get(2);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card3.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card3.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card3.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card3.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card3.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card3.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card3.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card3.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card3.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card3.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[2] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[2] = 0;
        }
    }//GEN-LAST:event_Card3MouseClicked

    private void Card4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card4MouseClicked
        String temp = cards.get(3);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card4.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card4.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card4.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card4.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card4.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card4.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card4.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card4.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card4.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card4.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[3] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[3] = 0;
        }
    }//GEN-LAST:event_Card4MouseClicked

    private void Card5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card5MouseClicked
        String temp = cards.get(4);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card5.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card5.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card5.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card5.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card5.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card5.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card5.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card5.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card5.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card5.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[4] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[4] = 0;
        }
    }//GEN-LAST:event_Card5MouseClicked

    private void Card6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card6MouseClicked
        String temp = cards.get(5);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card6.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card6.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card6.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card6.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card6.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card6.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card6.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card6.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card6.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card6.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[5] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[5] = 0;
        }
    }//GEN-LAST:event_Card6MouseClicked

    private void Card7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card7MouseClicked
        String temp = cards.get(6);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card7.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card7.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card7.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card7.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card7.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card7.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card7.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card7.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card7.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card7.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[6] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[6] = 0;
        }
    }//GEN-LAST:event_Card7MouseClicked

    private void Card8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card8MouseClicked
        String temp = cards.get(7);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card8.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card8.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card8.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card8.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card8.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card8.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card8.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card8.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card8.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card8.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[7] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[7] = 0;
        }
    }//GEN-LAST:event_Card8MouseClicked

    private void Card9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card9MouseClicked
        String temp = cards.get(8);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card9.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card9.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card9.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card9.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card9.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card9.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card9.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card9.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card9.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card9.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[8] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[8] = 0;
        }
    }//GEN-LAST:event_Card9MouseClicked

    private void Card10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card10MouseClicked
        String temp = cards.get(9);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card10.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card10.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card10.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card10.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card10.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card10.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card10.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card10.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card10.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card10.setIcon(j);
        }
        
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[9] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[9] = 0;
        }
    }//GEN-LAST:event_Card10MouseClicked

    private void Card11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card11MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_Card11MouseEntered

    private void Card11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card11MouseClicked
        String temp = cards.get(10);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card11.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card11.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card11.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card11.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card11.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card11.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card11.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card11.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card11.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card11.setIcon(j);
        }
        
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[10] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[10] = 0;
        }
    }//GEN-LAST:event_Card11MouseClicked

    private void Card12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card12MouseClicked
        String temp = cards.get(11);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card12.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card12.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card12.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card12.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card12.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card12.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card12.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card12.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card12.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card12.setIcon(j);
        }
        
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[11] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[11] = 0;
        }
    }//GEN-LAST:event_Card12MouseClicked

    private void Card13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card13MouseClicked
        String temp = cards.get(12);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card13.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card13.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card13.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card13.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card13.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card13.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card13.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card13.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card13.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card13.setIcon(j);
        }
        
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[12] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[12] = 0;
        }
    }//GEN-LAST:event_Card13MouseClicked

    private void Card14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card14MouseClicked
        String temp = cards.get(13);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card14.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card14.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card14.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card14.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card14.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card14.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card14.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card14.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card14.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card14.setIcon(j);
        }
        
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[13] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[13] = 0;
        }
    }//GEN-LAST:event_Card14MouseClicked

    private void Card15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card15MouseClicked
        String temp = cards.get(14);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card15.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card15.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card15.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card15.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card15.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card15.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card15.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card15.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card15.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card15.setIcon(j);
        }
        
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[14] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[14] = 0;
        }
    }//GEN-LAST:event_Card15MouseClicked

    private void Card16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card16MouseClicked
        String temp = cards.get(15);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card16.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card16.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card16.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card16.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card16.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card16.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card16.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card16.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card16.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card16.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[15] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[15] = 0;
        }
    }//GEN-LAST:event_Card16MouseClicked

    private void Card17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card17MouseClicked
        String temp = cards.get(16);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card17.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card17.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card17.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card17.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card17.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card17.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card17.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card17.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card17.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card17.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[16] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[16] = 0;
        }
    }//GEN-LAST:event_Card17MouseClicked

    private void Card18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card18MouseClicked
        String temp = cards.get(17);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card18.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card18.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card18.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card18.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card18.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card18.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card18.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card18.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card18.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card18.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[17] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[17] = 0;
        }
    }//GEN-LAST:event_Card18MouseClicked

    private void Card19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card19MouseClicked
        String temp = cards.get(18);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card19.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card19.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card19.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card19.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card19.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card19.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card19.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card19.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card19.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card19.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[18] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[18] = 0;
        }
    }//GEN-LAST:event_Card19MouseClicked

    private void Card20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card20MouseClicked
        String temp = cards.get(19);//Give temps to card 1~20
        if (temp.equals ("0")){//Temp for the rest pairs of cards
            Card20.setIcon(a);
        }
        else if (temp.equals("1")){//Temp for the rest pairs of cards
            Card20.setIcon(b);
        }
        else if (temp.equals("2")){//Temp for the rest pairs of cards
            Card20.setIcon(c);
        }
        else if (temp.equals("3")){//Temp for the rest pairs of cards
            Card20.setIcon(d);
        }
        else if (temp.equals("4")){//Temp for the rest pairs of cards
            Card20.setIcon(e);
        }
        else if (temp.equals("5")){//Temp for the rest pairs of cards
            Card20.setIcon(f);
        }
        else if (temp.equals("6")){//Temp for the rest pairs of cards
            Card20.setIcon(g);
        }
        else if (temp.equals("7")){//Temp for the rest pairs of cards
            Card20.setIcon(h);
        }
        else if (temp.equals("8")){//Temp for the rest pairs of cards
            Card20.setIcon(i);
        }
        else if (temp.equals("9")){//Temp for the rest pairs of cards
            Card20.setIcon(j);
        }
        
        //If one pair with same image then make changes, of not then don't change
        count ++;
        if (count == 1){
            c1 = Integer.parseInt(temp);
            change[19] = 0;
        }
        else if (count == 2){
            c2 = Integer.parseInt(temp);
            change[19] = 0;
        }
    }//GEN-LAST:event_Card20MouseClicked

    private void MessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MessageActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        //Variables
        count = 0;
        c1 = 0; 
        c2 = 0; 
        card1 = 0; 
        card2 = 0;
        cardsLeft = 20;
        change = new int [20];
        win = 20;
        
        Card1.setIcon (back);
        Card2.setIcon (back);
        Card3.setIcon (back);
        Card4.setIcon (back);
        Card5.setIcon (back);
        Card6.setIcon (back);
        Card7.setIcon (back);
        Card8.setIcon (back);
        Card9.setIcon (back);
        Card10.setIcon (back);
        Card11.setIcon (back);
        Card12.setIcon (back);
        Card13.setIcon (back);
        Card14.setIcon (back);
        Card15.setIcon (back);
        Card16.setIcon (back);
        Card17.setIcon (back);
        Card18.setIcon (back);
        Card19.setIcon (back);
        Card20.setIcon (back);
    }//GEN-LAST:event_ResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card1;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card13;
    private javax.swing.JButton Card14;
    private javax.swing.JButton Card15;
    private javax.swing.JButton Card16;
    private javax.swing.JButton Card17;
    private javax.swing.JButton Card18;
    private javax.swing.JButton Card19;
    private javax.swing.JButton Card2;
    private javax.swing.JButton Card20;
    private javax.swing.JButton Card3;
    private javax.swing.JButton Card4;
    private javax.swing.JButton Card5;
    private javax.swing.JButton Card6;
    private javax.swing.JButton Card7;
    private javax.swing.JButton Card8;
    private javax.swing.JButton Card9;
    private javax.swing.JTextField Message;
    private javax.swing.JButton Reset;
    private javax.swing.JLabel WinLabel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton exit;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton guessAgain;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton play;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
